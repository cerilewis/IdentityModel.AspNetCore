@page "/CallApiAsUser"
@attribute [Authorize]

@using Newtonsoft.Json.Linq
@using Microsoft.Extensions.Logging
@using IdentityModel.AspNetCore.AccessTokenManagement
@using IdentityModel.Client

@inject AuthenticationStateProvider AuthenticationStateProvider

<ApiResponse Response="@Content" />

@code
{
    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }
    
    [Inject]
    public ILogger<CallApiAsUser> Logger { get; set; }
    
    [CascadingParameter]
    public IUserAccessTokenManagementService UserAccessTokenManagementService { get; set; }

    private string Content { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (state.User.Identity?.IsAuthenticated ?? false)
            {
                var accessToken = await UserAccessTokenManagementService.GetUserAccessTokenAsync(state.User);

                var client = HttpClientFactory.CreateClient("user_client");
                client.SetBearerToken(accessToken);
            
                var response = await client.GetStringAsync("test");
            
                Content = JArray.Parse(response).ToString();                
            }
        }
        catch (Exception e)
        {
            Content = e.Message;
            Logger.LogError(e, "Error calling test API");
        }
        
        await base.OnInitializedAsync();
    }
}