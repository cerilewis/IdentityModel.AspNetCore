@using IdentityModel.Blazor
@using Microsoft.Extensions.Logging
@inject NavigationManager UriHelper

<CascadingAuthenticationState>
    <CascadingTokenIdentity InitialAuthenticationState="@InitialAuthenticationState">
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @{
                        var returnUrl = UriHelper.ToBaseRelativePath(UriHelper.Uri);
                        UriHelper.NavigateTo($"login?redirectUri={returnUrl}", forceLoad: true);
                    }
                </NotAuthorized>
                <Authorizing>
                    Authorizing...
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
    </CascadingTokenIdentity>
</CascadingAuthenticationState>        


@code
{
    [Parameter]
    public InitialAuthenticationState InitialAuthenticationState { get; set; }
    
    [Inject]
    public ILogger<App> Logger { get; set; }

    protected override void OnInitialized()
    {
        Logger.LogInformation("Access token from initial state: {AccessToken}", this.InitialAuthenticationState?.AccessToken);
        base.OnInitialized();
    }
}
